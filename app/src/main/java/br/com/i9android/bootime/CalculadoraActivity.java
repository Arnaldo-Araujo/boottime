package br.com.i9android.bootime;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SwitchCompat;

import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdView;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.tasks.Task;
import com.google.android.play.core.appupdate.AppUpdateInfo;
import com.google.android.play.core.appupdate.AppUpdateManager;
import com.google.android.play.core.appupdate.AppUpdateManagerFactory;
import com.google.android.play.core.appupdate.AppUpdateOptions;
import com.google.android.play.core.install.model.AppUpdateType;
import com.google.android.play.core.install.model.UpdateAvailability;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import br.com.i9android.bootime.util.DateMaskWatcher;

/**
 * Classe Calculadora - Respons√°vel pelo c√°lculo da diferen√ßa entre duas datas.
 * <p>
 * Esta atividade recebe duas datas de entrada e calcula a diferen√ßa entre elas
 * em anos, meses e dias. Tamb√©m permite ativar ou desativar a contagem de anos bissextos.
 * </p>
 *
 * @author Arnaldo Junior Dev
 * @version 1.0
 */
public class CalculadoraActivity extends AppCompatActivity {

    // Elementos da interface do usu√°rio
    private EditText editTextDataInicial, editTextDataFinal;
    private TextView textViewResultado;
    private SwitchCompat switchBissexto;
    protected ImageButton btnWhatsapp;
    protected ImageButton btnFacebook;

    // Formato de data utilizado para entrada e sa√≠da

    protected SimpleDateFormat sdf;
    protected Button buttonCalcular;
    private AppUpdateManager appUpdateManager;
    protected AdView adView;


    /**
     * Metodo chamado na cria√ß√£o da atividade.
     * Inicializa os componentes da interface e configura os eventos de clique e m√°scara de entrada.
     *
     * @param savedInstanceState Estado salvo da atividade anterior (caso exista).
     */
    @SuppressLint({"SimpleDateFormat", "SourceLockedOrientationActivity"})
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_calculadora);
        MobileAds.initialize(this, initializationStatus -> {
        });
        adView = findViewById(R.id.adView);
        if (adView != null) {
            carregarAnuncio();
        } else {
            Log.e("AdView", "Erro:adView n√£o foi encontrado no layout");
        }
        verificarAtualizacao();
        sdf = new SimpleDateFormat("dd/MM/yyyy");
        // Inicializa√ß√£o dos componentes da interface
        editTextDataInicial = findViewById(R.id.idDataInicial);
        editTextDataFinal = findViewById(R.id.idDataFinal);
        textViewResultado = findViewById(R.id.idTextResultado);
        buttonCalcular = findViewById(R.id.btnCalcularTempoDeServico);
        switchBissexto = findViewById(R.id.idBissextoOuNao);
        btnWhatsapp = findViewById(R.id.idimageWhatsapp);
        btnFacebook = findViewById(R.id.idimageFacebook);
        // Aplica√ß√£o da m√°scara de entrada para datas
        editTextDataInicial.addTextChangedListener(new DateMaskWatcher(editTextDataInicial, editTextDataFinal, this));
        editTextDataFinal.addTextChangedListener(new DateMaskWatcher(editTextDataFinal, this));

        // Configura√ß√£o do evento de clique no bot√£o de c√°lculo
        buttonCalcular.setOnClickListener(view -> calcularDiferencaDatas());
        btnWhatsapp.setOnClickListener(view -> compartilharDireto("com.whatsapp"));
        btnFacebook.setOnClickListener(view -> compartilharDireto("com.facebook.katana"));
    }

    private void carregarAnuncio() {
        AdRequest adRequest = new AdRequest.Builder().build();
        adView.loadAd(adRequest);
    }

    private void verificarAtualizacao() {
        appUpdateManager = AppUpdateManagerFactory.create(this);

        // Obt√©m informa√ß√µes sobre a atualiza√ß√£o dispon√≠vel
        Task<AppUpdateInfo> appUpdateInfoTask = appUpdateManager.getAppUpdateInfo();

        appUpdateInfoTask.addOnSuccessListener(appUpdateInfo -> {
            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE
                    && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)) {
                try {
                    // Inicia a atualiza√ß√£o usando o novo metodo
                    appUpdateManager.startUpdateFlow(appUpdateInfo, this, AppUpdateOptions.newBuilder(AppUpdateType.IMMEDIATE).build());
                } catch (Exception e) {
                    Log.e("AtualizacaoApp", "Erro ao iniciar atualiza√ß√£o", e); // ‚úÖ Melhor log
                    Toast.makeText(this, "Erro ao iniciar atualiza√ß√£o.", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    private void compartilharDireto(String pacote) {
        String appPackageName = getPackageName();
        String linkPlayStore = "https://play.google.com/store/apps/details?id=" + appPackageName;
        String mensagem = "Ol√°! Baixe o app BootTime e descubra seu tempo de servi√ßo militar! üöÄüì≤\n" + linkPlayStore;

        Intent intent = new Intent(Intent.ACTION_SEND);
        intent.setType("text/plain");
        intent.putExtra(Intent.EXTRA_TEXT, mensagem);
        intent.setPackage(pacote); // Define o app de destino (WhatsApp ou Facebook)

        // Verifica se o app de destino est√° instalado
        if (getPackageManager().getLaunchIntentForPackage(pacote) != null) {
            startActivity(intent);
        } else {
            // Caso o app n√£o esteja instalado, exibe op√ß√µes de compartilhamento
            startActivity(Intent.createChooser(intent, "Compartilhar via"));
        }
    }


    /**
     * Metodo respons√°vel por calcular a diferen√ßa entre as duas datas inseridas.
     * Exibe a diferen√ßa em anos, meses e dias, considerando ou n√£o anos bissextos.
     */
    private void calcularDiferencaDatas() {
        esconderTeclado();
        // Valida√ß√£o de preenchimento dos campos
        if (TextUtils.isEmpty(editTextDataInicial.getText()) || TextUtils.isEmpty(editTextDataFinal.getText())) {
            Toast.makeText(this, "Preencha ambas as datas!", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            // Convers√£o das strings de entrada para objetos Date
            Date dataInicio = sdf.parse(editTextDataInicial.getText().toString());
            Date dataFim = sdf.parse(editTextDataFinal.getText().toString());

            // Verifica se a convers√£o foi bem-sucedida
            if (dataInicio == null || dataFim == null) {
                Toast.makeText(this, "Data inv√°lida! Verifique o formato correto (DD/MM/YYYY).", Toast.LENGTH_SHORT).show();
                return;
            }

            // Valida√ß√£o para garantir que a data inicial seja anterior √† data final
            if (dataInicio.after(dataFim)) {
                Toast.makeText(this, "A data de in√≠cio deve ser anterior √† data de t√©rmino", Toast.LENGTH_SHORT).show();
                return;
            }

            // Convers√£o das datas para Calendar para manipula√ß√£o
            Calendar inicio = Calendar.getInstance();
            inicio.setTime(dataInicio);
            Calendar fim = Calendar.getInstance();
            fim.setTime(dataFim);

            // C√°lculo da diferen√ßa inicial entre os anos, meses e dias
            int anos = fim.get(Calendar.YEAR) - inicio.get(Calendar.YEAR);
            int meses = fim.get(Calendar.MONTH) - inicio.get(Calendar.MONTH);
            int dias = fim.get(Calendar.DAY_OF_MONTH) - inicio.get(Calendar.DAY_OF_MONTH);

            // Ajuste caso os dias sejam negativos
            if (dias < 0) {
                meses--;
                fim.add(Calendar.MONTH, -1);
                dias += fim.getActualMaximum(Calendar.DAY_OF_MONTH);
            }

            // Ajuste caso os meses sejam negativos
            if (meses < 0) {
                anos--;
                meses += 12;
            }

            // Contagem de anos bissextos se a op√ß√£o estiver ativada
            if (switchBissexto.isChecked()) {
                // Vari√°vel para armazenar a contagem de dias bissextos
                int diasBissextos = contarDiasBissextos(inicio.get(Calendar.YEAR), fim.get(Calendar.YEAR));
                dias += diasBissextos; // Soma os dias bissextos antes da convers√£o para meses
            }

            // Convers√£o de dias excedentes para meses
            while (dias >= 30) {
                meses++;
                dias -= 30;
            }

            // Convers√£o de meses excedentes para anos
            while (meses >= 12) {
                anos++;
                meses -= 12;
            }

            // Exibi√ß√£o do resultado formatado
            String resultado = "Diferen√ßa: " + anos + (anos <= 1 ? " ano " : " anos ") +
                    meses + (meses <= 1 ? " m√™s " : " meses ") +
                    dias + (dias <= 1 ? " dia.\n" : " dias.\n");

            textViewResultado.setText(resultado);
            textViewResultado.setVisibility(View.VISIBLE);

        } catch (ParseException e) {
            // Tratamento de erro para formato de data inv√°lido
            Toast.makeText(this, "Data inv√°lida! Use o formato correto.", Toast.LENGTH_SHORT).show();
        }
    }

    private void esconderTeclado() {
        View view = this.getCurrentFocus();
        if (view != null) {
            InputMethodManager imm = (InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE);
            imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
        }
    }

    /**
     * Conta quantos anos bissextos existem no intervalo entre os anos inicial e final.
     * <p>
     * Se o intervalo come√ßar ap√≥s fevereiro em um ano bissexto, esse ano n√£o ser√° contado.
     * </p>
     *
     * @param anoInicio Ano inicial do intervalo
     * @param anoFim    Ano final do intervalo
     * @return N√∫mero de anos bissextos no per√≠odo
     */
    private int contarDiasBissextos(int anoInicio, int anoFim) {
        int count = 0;
        for (int ano = anoInicio; ano <= anoFim; ano++) {
            if (ehAnoBissexto(ano)) {
                // Se for o primeiro ano do per√≠odo, verifica se come√ßou antes de mar√ßo
                if (ano == anoInicio) {
                    Calendar inicio = Calendar.getInstance();
                    inicio.set(Calendar.YEAR, anoInicio);
                    if (inicio.get(Calendar.MONTH) > Calendar.FEBRUARY) {
                        continue; // Se o per√≠odo come√ßou depois de fevereiro, n√£o conta esse ano bissexto
                    }
                }
                count++;
            }
        }
        return count;
    }

    /**
     * Verifica se um ano √© bissexto.
     *
     * @param ano Ano a ser verificado
     * @return true se for bissexto, false caso contr√°rio
     */
    private boolean ehAnoBissexto(int ano) {
        return (ano % 4 == 0 && ano % 100 != 0) || (ano % 400 == 0);
    }
}
